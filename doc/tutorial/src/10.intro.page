---
title: Introduction
inMenu: true
---

This is a tutorial for Ruby D-Bus, a library to access D-Bus facilities of your
system. This chapter has the following sections:

# "What is D-Bus?":#what-is
# "Definitions":#def
## "Client":#def-client
## "Service":#def-service
## "Object path":#def-obj-path
## "Interface":#def-iface
## "Method":#def-method
## "Signal":#def-signal
## "Message":#def-message
## "Signature":#def-sig

h2(#what-is). What is D-Bus?

D-Bus is a RPC(Remote Procedure Call) protocol, and two common buses that
route the procedure calls. One bus is used by modern desktops (the session
bus), another one is used by hardware abstraction layer (the system bus).
To be exact, the D-Bus RPC protocol can be used without the system or session
bus. I never came across any actual use of this though.

At the desktop level, D-Bus allow some components to interact. Typically if you
are writing an application or a personal script that wants to interact with
your web browser, your music player, or that simply wants to pop-up a desktop
notification, D-Bus comes into play.

At the system level, the hardware abstraction layer is a privileged daemon that
notifies other software of hardware activities.  Typically, if you want to be
notified if a CD-ROM has been loaded in, of if you want to explore hardware, the
system daemon comes into play.

The D-Bus RPC system is as we will see object oriented.

Buses provide access to services provided in turn by running or ready do run
processes. To have a clearer talk, let me introduce some D-Bus terminology
before the Ruby API.

h2(#def). Definitions

h3(#def-client). Client

A D-Bus client is a process that connects to a D-Bus. They issue method
calls, register to the bugs for signals events.

h3(#def-service). Service

A connected client can export some of its objects and let other clients
call some of its methods. Such client typically register a special name
like @org.freedesktop.Notifications@, the service name.

There is slightly different type of service. They are provided by
processes that can be launched by a D-Bus daemon on demand. Once the are
started by D-Bus they register a service name and behave like another
client.

The buses themselves provide the @org.freedesktop.DBus@ service, and provide
features through it.

h3(#def-obj-path). Object path

An object path is the D-Bus way to specify an object *instance* address. A
service can provide different object instance to the outside world, so
that external processes to call methods on them.
Object path is an address of an instance in very similar way that the path
is an address of a file on a file system.
@/org/freedesktop/Notification@ is an object path of an object provided by
the @org.freedesktop.Notification@ service

h3(#def-iface). Interface

Classically in an object model, classes can implement interface. That is
some method definitions grouped in an interface. This is exactly what a
D-Bus interface is. In D-Bus interface have names. This names must  be
specified on method calls.

The @org.freedesktop.Notification@ service provides an object instance called
@/org/freedesktop/Notification@. This instance object implements
an interface called @org.freedesktop.Notifications@. It also provides two special
D-Bus specific interfaces: @org.freedesktop.DBus.Introspect@,
@org.freedesktop.DBus.Properties@.

Basically the @org.freedesktop.DBus.Introspect@ has a @Introspect@ method,
that returns XML data describing the @/org/freedesktop/Notification@ object
interfaces. This is used heavily internally by Ruby D-Bus.

h3(#def-method). Method

A method is, well, a method in the classical meaning. It's a function that
is called in the context of an object instance. Methods have typed
parameters and return typed return value.

h3(#def-signal). Signal

Signals are simplified method calls that do not have a return value. They
do have typed parameters though.

h3(#def-message). Message

Method calls, Method returns, Signals, Errors, all are encoded as a D-Bus
message sent on a bus. They are made of a packet header with source and
destination address, a type (method call, method reply, signal ?) and the
body is the parameters (for signals and method calls) or the return values
(for a method return message).

h3(#def-sig). Signature

Because D-Bus is typed and dynamic, messages come with signature, that
describe the types of the data that comes with the message. The signature
is a string. It's an extremely basic language that only can describe data
type. You will need to have some knowledge of what a signature looks like
if you program a service. D-Bus clients can live without knowing them.
