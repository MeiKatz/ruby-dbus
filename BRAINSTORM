API Ideas. Feel free to add yours.

Call a method on an introspectable dbus object : IMPLEMENTED

################################################################################
proxy = bus.introspect("org.whatever.client", "/its/nifty/object")
intf = proxy["org.whatever.interface"]
# Synchronously
returned, stuff = intf.WhateverMethod(and, its, args)
# Asynchronously
intf.proxy["org.whatever.interface"].WhateverMethod(and, its, args) { |returned, stuff|
  dostuff
}
################################################################################

Call a method on a known object on a known client, without introspection :
First api, simple, already implemented, but messy:

################################################################################
msg = Message.new(Message::METHOD_CALL)
msg.destination =...
msg.interface =...
msg.member =...
# async
bus.send(m)
bus.on_return(m) { |retmsg| ...}
# sync, maybe the api should be changed to retmsg = bus.send_sync(m) for
# consistency
bus.send_sync(m) { |retmsg| ...}
################################################################################

Second api, not implemented, closer to others dbus implementations :

################################################################################
object = bus.get_object("org.whatever.client", "/its/nifty/object")
object.get_interface("org.whatever.interface").call("Method", [[STRING, "whatever"], [VARIABLE, 10]])
################################################################################

Now nothing is implemented for this:
API to export an object to a BUS...
Just random thoughts right now. I *think* it's feasable. I cannot think of a
lower level API.

################################################################################
def MyInterface < DBus::Interface
  name "org.whatever.interface"
  export_method :MyMethod, "in arg1:s, in arg2:y, out ret1:u"
  export_signal :MySignal, "s, y, u"
end

class MyObject < DBus::Object
  implements :MyInterface
  introspectable true

  def initialize; super("/my/path"); end

  def MyMethod(a_s, a_y)
    puts "got #{a_s} #{a_y}"
    return [28]
  end

  def MySignal(a_s, a_y, a_u)
    puts "got signal #{a_s} #{a_y}"
  end
end

bus.export(MyObject.new)
################################################################################


